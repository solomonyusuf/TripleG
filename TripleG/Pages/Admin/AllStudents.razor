@page "/admin/student"
@using System.Collections.ObjectModel
@inject StudentController http
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin,Teacher")]

      @*  if(student == null){
    <span align="center" class="spinner-border spinner-border-sm" role="status" style="width: 100px; height: 100px; margin: 100px; align-self:center;"></span>
    }
    else{
*@

<div class="container-fluid">
    <h3 class="text-dark mb-4">Database Students &nbsp;<a class="btn btn-outline-primary" href="/admin/add/student">Add Student</a></h3>
    <div class="card shadow">
        <div class="card-header py-3">
            <p class="text-primary m-0 fw-bold">Student Info &nbsp;@Students.Count()</p>
        </div>
        <div class="card-body">
            <div class="row">

                <EditForm Model="search" class="col-md-12">
                    <div class="col-md-12">
                        <InputText @bind-Value="@search.Name" type="search" class="form-control col-md-12" placeholder="Search by Student Name" />
                    </div><br />
                    <button @onclick="FindA" class="btn btn-primary w-100">Search here</button>
                </EditForm>
            </div>
            <div class="table-responsive table-boardered table mt-2" id="dataTable" role="grid" aria-describedby="dataTable_info">
                <table class="table my-0" id="dataTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>ID</th>
                            <th>Class</th>
                            <th>DOB</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var s in Students)
                        {

                            <tr>
                                <td><img class="rounded-circle me-2" width="30" height="30" src="@s.ImgPath">@s.FirstName&nbsp;@s.MiddleName &nbsp;@s.LastName</td>
                                <td>@s.StudentId</td>
                                <td>@s.Class</td>
                                <td>@s.DOB</td>
                                <td><a class="btn btn-primary" href="/admin/student/details/@s.ParentId"><i class="fa fa-edit"></i></a></td>
                                <td><button class="btn btn-danger" @onclick="(async ()=> await Delete(s.StudentId))"><i class="fa fa-remove"></i></button></td>

                            </tr>

                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>




@code {
    protected override async Task OnInitializedAsync()
    {
        await this.GetAll();
    }

    public List<Student> Students = new List<Student>();
    public ParentInfo Parent = new ParentInfo();
    public string ID { get; set; }
    public class Search
    {
        public string Name { get; set; }
    }
    public Search search = new();
    [Parameter]
    public EventCallback<string> OnChange { get; set; }


    private async Task FindA()
    {
        try
        {

            var res = await this.http.GetStudents();
            this.Students = res.Value.Where(s => $"{s.FirstName + "" + s.LastName + "" + s.MiddleName }".ToLowerInvariant().Contains(search.Name.ToLowerInvariant())).ToList();



        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task GetAll()
    {
        try
        {
            var res = await this.http.GetStudents();
            this.Students = res.Value.ToList();

        }
        catch (Exception ex)
        {
            Console.Write(ex);
        }
    }




    private async Task Delete(Guid StudentId)
    {
        try
        {
            var response = await this.http.DeleteStudent(StudentId);
            await this.GetAll();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

}
