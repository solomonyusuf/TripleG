@page "/admin/add/student"
@inject NavigationManager route
@inject StudentController http
@inject ParentController par
@using Microsoft.AspNetCore.Authorization
@using System.IO
@attribute [Authorize(Roles = "Admin,Teacher")]

<div>
    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item" role="presentation"><a class="nav-link active" role="tab" data-bs-toggle="tab" href="#tab-1">Student info</a></li>
        <li class="nav-item" role="presentation"><a class="nav-link" role="tab" data-bs-toggle="tab" href="#tab-2">Parent Info</a></li>
        <li class="nav-item" role="presentation"><a class="btn btn-lg bg-gradient-primary" href="/admin/student"><i class="fa fa-previous"></i></a></li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane fade show active" role="tabpanel" id="tab-1">
            <section class="contact-clean">
                <form>

                    <h2 class="text-center">Create Student</h2>
                    <EditForm Model="@student">

                        @if(Path != null)
                        {
                            <div class="mb-3">
                            <img src="@Path" style="height:300px;width:300px;" type="text" class="form-control shadow-dark" />
                        </div>
                        }
                        <div class="mb-3">
                            <InputFile OnChange="@Upload" accept=".jpg ,.png,.jpeg" class="form-control" type="file" />
                            </div>


                        <div class="mb-3"><InputText @bind-Value="student.FirstName" class="form-control" type="text" name="FirstName" placeholder="FirstName" /></div>
                        <div class="mb-3"><InputText @bind-Value="student.MiddleName" class="form-control" type="text" name="MiddleName" placeholder="MiddleName" /></div>
                        <div class="mb-3"><InputText @bind-Value="student.LastName" class="form-control" type="text" name="LastName" placeholder="LastName" /></div>
                        <div class="mb-3"><label>Class</label></div>
                        <InputSelect @bind-Value="@student.Class">
                            @foreach (var item in Enum.GetValues(typeof(Class)))
                            {
                                <option value="@item">@item</option>
                            }
                        </InputSelect>
                        <div class="mb-3"><label>Sex</label></div>
                        <InputSelect @bind-Value="@student.Sex">
                            @foreach (var sex in Enum.GetValues(typeof(Sex)))
                            {
                                <option value="@sex">@sex</option>
                            }
                        </InputSelect>
                        <div class="mb-3"></div>
                        <label class="form-label text-center">Date of Birth</label>
                        <InputText @bind-Value="student.DOB" class="form-control" type="date" />
                        <div class="mb-3"></div>
                        <div class="mb-3">
                            <InputText @bind-Value="student.OriginState" class="form-control" type="text" name="state of Origin" placeholder="state of Origin" />
                        </div>
                        <div class="mb-3"></div>
                        <div class="mb-3"></div>
                    </EditForm>
                </form>
            </section>
        </div>
        <div class="tab-pane fade" role="tabpanel" id="tab-2">
            <section class="contact-clean">
                <form method="post">
                    <h2 class="text-center" style="color: rgb(80, 94, 108);">Parent Details</h2>
                    <EditForm Model="@parent" OnValidSubmit="SaveStudent">
                        <div class="mb-3"><InputText @bind-Value="parent.ParentName" class="form-control" type="text" name="ParentName" placeholder="Parent Name" /></div>
                        <div class="mb-3"><InputText @bind-Value="parent.Email" class="form-control" type="text" name="Email" placeholder="Email" /></div>
                        <div class="mb-3"><InputText @bind-Value="parent.Occupation" class="form-control" type="text" name="Occupation" placeholder="Occupation" /></div>
                        <div class="mb-3"><InputText @bind-Value="parent.City" class="form-control" type="text" name="City" placeholder="City" /></div>
                        <div class="mb-3"><InputText @bind-Value="parent.PhoneNumber_1" class="form-control" type="text" name="PhoneNumber_1" placeholder="Phone Number 1" /></div>
                        <div class="mb-3"><InputText @bind-Value="parent.PhoneNumber_2" class="form-control" type="text" name="Phone Number 2" placeholder="Phone Number 2" /></div>
                        <div class="mb-3"><InputText @bind-Value="parent.Address_1" class="form-control" type="text" name="Address 1" placeholder="Address 1" /></div>
                        <div class="mb-3"><InputText @bind-Value="parent.Address_2" class="form-control" type="text" name="Address 2" placeholder="Address 2" /></div>
                        <div class="mb-3"><button class="btn btn-primary" type="submit">send </button></div>
                    </EditForm>
                </form>
            </section>
        </div>

    </div>
</div>

@code {
    public Student student = new Student();
    public ParentInfo parent = new ParentInfo();
    public string Path;
    public enum Sex
    {
        NULL,
        MALE,
        FEMALE
    }

    public enum Class
    {
        DISCOVERY,
        NURSERY_1,
        NURSERY_2,
        BASIC_1,
        BASIC_2,
        BASIC_3,
        BASIC_4,
        BASIC_5,
        BASIC_6,
        JSS1,
        JSS2,
        JSS3,
        SS1,
        SS2,
        SS3
    }

    public async Task Upload(InputFileChangeEventArgs args)
    {
        var file = args.File;
        var stream = file.OpenReadStream(20000000); 
        var p = $"StaticFiles\\{file.Name}";
        student.ImgPath = p;
        var create = File.Create(p);
        await stream.CopyToAsync(create);
        stream.Close();
        create.Close();
        Path = p;
    }


    [HttpPost]
    private async Task SaveStudent()
    {
        try
        {
            var save = await this.http.PostStudent(student);
            var res = save.StudentId;
            await this.SaveParent(res);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    [HttpPost]
    private async Task SaveParent(Guid studentId)
    {
        try
        {
            this.parent.StudentId = studentId;
            var response = await this.par.PostParentInfo(parent);
            var req = response;
            await GetStudent(response.StudentId);
            await GetParent(response.ParentId);
            this.student.ParentId = req.ParentId.ToString();
            await UpdateStudent(req.StudentId);
            route.NavigateTo("/admin/student");

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    [HttpPut]
    private async Task UpdateStudent(Guid studentId)
    {
        try
        {
            var model = await http.PutStudent(studentId, student);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    [HttpGet]
    private async Task GetStudent(Guid studentId)
    {
        try
        {
            var res = await http.GetStudent(studentId);
            this.student = res;




        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    [HttpGet]
    private async Task GetParent(Guid parentId)
    {
        try
        {
           var a = await par.GetParentInfo(parentId);
            this.parent = a;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


}
