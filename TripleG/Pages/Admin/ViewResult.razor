@page "/admin/view/result/{studentId}"
@using Microsoft.AspNetCore.Authorization
@using TripleG
@inject StudentController std
@inject StudentResultController stdres
@inject ResultController res
@layout AdminLayout



<div class="container-fluid">
    <h3 class="text-dark mb-4">View Results &nbsp;</h3>
    <div class="card shadow">
        <div class="card-header py-3">
            <p class="text-primary m-0 fw-bold">
                Results Info &nbsp;@reshub.Count() &nbsp;|| &nbsp;@student.FirstName &nbsp;@student.LastName
            </p>
        </div>
        <div class="card-body">
            <div class="table-responsive table mt-2" id="dataTable" role="grid" aria-describedby="dataTable_info">
                <table class="table my-0" id="dataTable">

                    <tbody>
                        @foreach (var s in reshub)
                        {
                            <tr>
                                <td>@*<img class="rounded-circle me-2" width="30" height="30" src="@student.ImgPath">*@&nbsp;@student.FirstName &nbsp; @student.MiddleName &nbsp; @student.LastName </td>
                                <td>@s.ResultId</td>
                                <td><a class=" btn btn-info" href="/check/result/@student.StudentId/@s.ResultId">View</a></td>
                                <AuthorizeView Roles="Teacher,Admin">
                                    <Authorized>

                                        <td><a class=" btn btn-outline-primary" href="/result/detail/@student.StudentId/@s.ResultId"><i class="fa fa-edit"></i></a></td>
                                        <td><button class="btn btn-danger" @onclick="@(()=>Delete(@s.ResultId))"><i class="fa fa-remove"></i></button></td>
                                    </Authorized>
                                </AuthorizeView>

                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string studentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await this.GetAll();
    }
    public Student student = new();
    public List<StudentResult> reshub = new();
    public Result result = new();
    private async Task GetAll()
    {
        try
        {
            var res = await this.std.GetStudent(Guid.Parse(studentId));
            var hub = await this.stdres.GetStudentResult();
            var info = hub.Where(s => s.StudentId.ToString().ToLower() == studentId.ToString().ToLower()).ToList();
            this.student = res;
            reshub = info.OrderByDescending(x=>x.ResultId).ToList();
            


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task GetResult(Guid id)
    {
        try
        {

            var hub = await this.res.GetResult(id);
            result = hub.Value;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task Delete(Guid id)
    {
        try
        {
            await this.stdres.DeleteStudentResult(id);
            var response = await this.res.DeleteResult(id);
            await this.GetAll();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

}
